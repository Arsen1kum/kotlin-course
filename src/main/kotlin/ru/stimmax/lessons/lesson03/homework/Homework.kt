package Kotlin.example.ru.stimmax.lessons.lesson03.homework

// 1. Название мероприятия (неизменяемая публичная переменная известная на момент написания)
val eventName: String = "ColdBrew Caspresso Hackaton"

// 2. Дата проведения (публичная переменная известная на момент написания, но может быть изменена из-за переноса)
var eventDate: String = "16 февраля 2026"

// 3. Место проведения (публичная переменная — может быть изменена при смене площадки)
var eventLocation: String = "Москва, Шератон"

// 4. Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы.
// (приватная неизменяемая переменная — её не должны увидеть и бюджет уже утверждён)
private val eventBudget: String = "подробная информация с перечислением поставщиков и сумм для внутреннего пользования"

// 5. Количество участников (рассмотрим сценарий планового максимального количества.
//  => публичная неизменяемая переменная, известна на момент создания)
val participantsCount: Int = 120

// 6. Длительность хакатона (публичная неизменяемая переменная, известна заранее)
val hackathonDuration: Int = 48  // в часах

// 7. Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг
// (приватная неизменяемая переменная — данные конфиденциальные и не должны быть видны публично)
private val vendorContracts: String = "контактные лица, телефоны, e-mail, условия поставок и оплаты"

// 8. Текущее состояние хакатона (статус)
// (публичная изменяемая переменная, может меняться в процессе, может быть объявлен, перенесен, отменен...)
// можно заморочиться с архитектурой и объявить доступные значения через геттер-сеттер
var hackathonStatus: String = "Планируется"

// 9. Список спонсоров (публичная переменная, но может пополняться в процессе)
var sponsorsList: String = "Компания A, Компания B"

// 10. Бюджет мероприятия (тотал величина выделенного бюджета, не публичная информация
// в этом сценарии превышение бюджета не предусмотрено
private val Budget: Int = 500000  // сумма в условных единицах

// 11. Текущий уровень доступа к интернету
// (публичная булевая переменная: true = интернет есть, false = нет)
var isInternetAvailable: Boolean = true

fun main() {
    if (isInternetAvailable) {
        println("Интернет доступен")
    } else {
        println("Интернет недоступен")
    }
}

// 12. Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки
// (приватная неизменяемая переменная — внутренние логистические данные)
private val logisticsInfo: String = "маршруты перевозки, графики распределения ресурсов, ответственные лица"

// 13. Количество команд (изменяемая переменная, будет известно ближе к старту)
val teamsCount: Int = 10

// 14. Перечень задач (определяется ближе к мероприятию, поэтому отложенная инициализация)
lateinit var taskList: String

// 15. План эвакуации (публичная неизменяемая переменная — утверждён и не меняется)
val evacuationPlan: String = "Схема эвакуации, утверждённая службой безопасности"

// 16. Список доступного оборудования (публичная переменная, известна заранее, изменяться не должна)
val availableEquipment: String = "Ноутбуки, проекторы, удлинители, маркеры"

// 17. Список свободного оборудования (публичная изменяемая переменная — обновляется по мере использования участниками)
var freeEquipment: String = "Ноутбуки: 5 шт, Проекторы: 2 шт"

// 18. График питания участников
// (публичная изменяемая переменная с отложенной инициализацией, так как на момент создания поставщик не известен)
lateinit var mealSchedule: String

// 19. План мероприятий на случай сбоев
// (приватная неизменяемая переменная, инициализация только при первом обращении для экономии ресурсов)
private val contingencyPlan: String by lazy {
    "Сценарии аварийного реагирования, ответственные лица, контакты служб"
}

// 20. Список экспертов и жюри (публичная неизменяемая переменная — известен при старте и не меняется)
val expertsAndJudges: String = "Эксперт 1, Эксперт 2, Эксперт 3"

// 21. Политика конфиденциальности (публичная неизменяемая — текст/ссылка известны заранее)
val privacyPolicy: String = "https://example.com/privacy"

// 22. Приватные отзывы участников и зрителей (инициализируется после мероприятия, только при первом запросе)
private val privateFeedback: String by lazy {
    "Отзывы участников будут подгружены после завершения мероприятия"
}

// 23. Текущая температура в помещении (публичная изменяемая — обновляется по датчикам)
var roomTemperatureC: Int = 22

// 24. Данные мониторинга и анализ производительности сети для отладки приложений
// (приватная ленивая инициализация — может требовать тяжёлых вычислений/загрузки)
private val networkDiagnostics: String by lazy {
    "Агрегированные метрики: задержка, потери пакетов, пропускная способность, логи устройств"
}

// 25. Регулятор скорости интернета (понижающий коэффициент, например 0.5)
// (публичная изменяемая с валидацией; допускаем (0; 1])
var internetThrottleFactor: Double = 0.5
    set(value) {
        require(value > 0.0 && value <= 1.0) { "Коэффициент должен быть в диапазоне (0; 1]." }
        field = value
    }

// 26. Уровень освещения (значение ограничено диапазоном 0–100%)
var lightLevel: Int = 80
    set(value) {
        require(value in 0..100) { "Уровень освещения должен быть от 0 до 100%" }
        field = value
    }

// 27. Лог событий мероприятия (инициализируется только при первом обращении)
private val eventLog: String by lazy {
    "Событийный лог формируется в процессе мероприятия"
}

// 28. Возможность получения медицинской помощи прямо на мероприятии (булево: да/нет)
val isMedicalSupportAvailable: Boolean = true

// 29. Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы ЧС
// (приватная неизменяемая переменная — доступна только организаторам)
private val safetyProcedures: String = "Полный документ с планами эвакуации и контактами ответственных лиц"

// 30. Регистрационный номер мероприятия (публичная константа — известен заранее и не меняется)
const val EVENT_REGISTRATION_NUMBER: String = "HACK2025-001"

// 31. Максимально допустимый уровень шума в помещении хакатона (публичная константа, дБ)
const val MAX_NOISE_LEVEL_DB: Int = 85

// 32. Индикатор превышения уровня шума (булево: true = превышен, false = в норме)
var isNoiseExceeded: Boolean = false

// 33. План взаимодействия с прессой
// (приватная неизменяемая переменная — внутренний документ для организаторов)
private val pressPlan: String = "Регламент общения со СМИ, список аккредитованных журналистов, пресс-релизы"

// 34. Детальная публичная информация о проектах каждой команды
// (публичная переменная с ленивой инициализацией — формируется после компиляции и проверки проектов)
val projectDetails: String by lazy {
    "Информация о командах, коде и результатах автотестов"
}

// 35. Статус получения всех необходимых разрешений
var permitsStatus: String = "В процессе"
    set(value) {
        require(value in listOf("В процессе", "Получены", "Отказано")) {
            "Недопустимое значение статуса разрешений"
        }
        field = value
    }

// 36. Индикатор доступности специализированного оборудования (true = доступно, false = недоступно)
var isSpecialEquipmentAvailable: Boolean = true

// 37. Список партнёров мероприятия (формируется ближе к началу, поэтому отложенная инициализация)
lateinit var partnersList: String

// 38. Отчёт, включающий фото, видео и отзывы (формируется после завершения мероприятия)
// (публичная переменная с ленивой инициализацией, чтобы создавать отчёт только при первом запросе)
val eventReport: String by lazy {
    "Сформированный отчёт: фото, видео, отзывы участников"
}

// 39. Внутренние правила распределения призов
// (приватная неизменяемая переменная — доступна только организаторам)
private val prizeDistributionRules: String = "Правила: критерии отбора победителей, порядок выдачи призов"

// 40. Список разыгрываемых призов (публичная неизменяемая переменная — утверждён заранее)
val prizeList: String = "Главный приз, Подарочные сертификаты, Мерч"

// 41. Контактная информация экстренных служб, медперсонала и других важных служб (приватная, для организаторов)
private val emergencyContacts: String = "Список телефонов и контактов экстренных служб и врачей"

// 42. Особые условия для участников с ограниченными возможностями (публичная неизменяемая переменная)
val accessibilityConditions: String = "Рампы, специальные места, волонтёры-наставники"

// 43. Общее настроение участников (публичная переменная с ленивой инициализацией — определяется при первом опросе)
val participantsMood: String by lazy {
    "Не определено"  // значение до проведения первого опроса
}

// 44. Подробный план хакатона (инициализируется непосредственно перед началом мероприятия)
// (публичная переменная с отложенной инициализацией)
lateinit var detailedHackathonPlan: String

// 45. Имя знаменитого специального гостя (публичная переменная, значение станет известно за день до мероприятия)
lateinit var specialGuestName: String

// 46. Максимальное количество людей, которое может вместить место проведения (публичная константа, известна заранее)
const val VENUE_MAX_CAPACITY: Int = 300

// 47. Количество часов, отведённое каждой команде для работы над проектом (публичная неизменяемая переменная)
val workHoursPerTeam: Int = 36


